version: "3.8"

services:
  # ASP.NET Web API
  fintrackwebapi:
    build:
      context: ./FinTrackWebApi
      dockerfile: Dockerfile
    container_name: fintrack_api
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FinBotApiUrl=http://finbotwebapi:8000
      - ConnectionStrings__DefaultConnection=Host=db_postgres;Port=5432;Database=myfintrackdb;Username=postgres;Password=140xxx-+
    depends_on:
      - finbotwebapi
      - db_postgres
      - ollama
    networks:
      - fintrac_network

  # Ngrok
  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok_tunnel
    restart: unless-stopped
    ports:
      - "4040:4040"
    environment:
      - NGROK_AUTHTOKEN=2wuCJxMriYB0MvVAanMEzZwsVGK_3UfHpEqo3wyQ73BGuRGYX
    command:
      - "http"
      - "fintrack_api:8080"
      - "--log=stdout"
    depends_on:
      - fintrackwebapi
    networks:
      - fintrac_network

  # FinBot API
  finbotwebapi:
    build:
      context: ./FinBotWebApi
      dockerfile: Dockerfile
    container_name: finbot_api
    ports:
      - "5001:8000"
    env_file:
      - ./FinBotWebApi/.env
    environment:
      - OLLAMA_API_URL=http://ollama:11434
    depends_on:
      - ollama
    networks:
      - fintrac_network

  # PostgreSQL
  db_postgres:
    image: postgres:15
    container_name: postgres_db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=myfintrackdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=140xxx-+
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fintrac_network
    restart: unless-stopped
    command: >
      postgres
      -c archive_mode=on
      -c archive_command='test ! -f /pgbackrest/archive/%f && pgbackrest --stanza=myfintrackstanza archive-push %p'
      -c wal_level=replica
      -c max_wal_senders=3
      -c listen_addresses='*'
      -c log_statement=all
      -c log_directory=pg_log
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c logging_collector=on

  # pgBackRest Ana Servis
  pgbackrest:
    build:
      context: ./pgbackrest
      dockerfile: Dockerfile
    container_name: pgbackrest_repo
    environment:
      - PGPASSWORD=140xxx-+
      - TZ=Europe/Istanbul
    volumes:
      - pgbackrest_repo:/pgbackrest
      - ./pgbackrest/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf
      - backup_logs:/var/log/pgbackrest
    networks:
      - fintrac_network
    depends_on:
      - db_postgres
    restart: unless-stopped

  # Gelişmiş Otomatik Yedekleme Sistemi
  pgbackrest_scheduler:
    build:
      context: ./pgbackrest
      dockerfile: Dockerfile
    container_name: pgbackrest_scheduler
    volumes:
      - pgbackrest_repo:/pgbackrest
      - ./pgbackrest/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf
      - backup_logs:/var/log/pgbackrest
      - ./scripts:/scripts
    networks:
      - fintrac_network
    depends_on:
      - db_postgres
      - pgbackrest
    environment:
      - PGPASSWORD=140xxx-+
      - TZ=Europe/Istanbul
    restart: unless-stopped
    command: >
      sh -c "
        apt update && apt install -y pgbackrest cron curl postgresql-client &&
        
        # İlk stanza oluştur
        pgbackrest --stanza=myfintrackstanza stanza-create || true &&
        
        # İlk full backup
        pgbackrest --stanza=myfintrackstanza --type=full backup || true &&
        
        # Cron job'ları ayarla
        echo '# pgBackRest Yedekleme Planı' > /etc/cron.d/pgbackrest_schedule &&
        echo '# Her gün 02:00 - Incremental backup' >> /etc/cron.d/pgbackrest_schedule &&
        echo '0 2 * * * root /scripts/backup_incremental.sh >> /var/log/pgbackrest/incremental.log 2>&1' >> /etc/cron.d/pgbackrest_schedule &&
        echo '# Her Pazar 03:00 - Full backup' >> /etc/cron.d/pgbackrest_schedule &&
        echo '0 3 * * 0 root /scripts/backup_full.sh >> /var/log/pgbackrest/full.log 2>&1' >> /etc/cron.d/pgbackrest_schedule &&
        echo '# Her 6 saatte - Health check' >> /etc/cron.d/pgbackrest_schedule &&
        echo '0 */6 * * * root /scripts/health_check.sh >> /var/log/pgbackrest/health.log 2>&1' >> /etc/cron.d/pgbackrest_schedule &&
        echo '# Her ay 1. gün 04:00 - Backup verify' >> /etc/cron.d/pgbackrest_schedule &&
        echo '0 4 1 * * root /scripts/verify_backup.sh >> /var/log/pgbackrest/verify.log 2>&1' >> /etc/cron.d/pgbackrest_schedule &&
        
        chmod 0644 /etc/cron.d/pgbackrest_schedule &&
        crontab /etc/cron.d/pgbackrest_schedule &&
        
        # Log dizinlerini oluştur
        mkdir -p /var/log/pgbackrest &&
        
        # Cron servisini başlat
        cron -f
      "

  # Yedekleme İzleme Dashboard'u
  backup_monitor:
    image: nginx:alpine
    container_name: backup_monitor
    ports:
      - "8081:80"
    volumes:
      - ./monitoring/nginx.conf:/etc/nginx/nginx.conf
      - ./monitoring/html:/usr/share/nginx/html
      - backup_logs:/var/log/pgbackrest:ro
    networks:
      - fintrac_network
    depends_on:
      - pgbackrest_scheduler

  # Ollama
  ollama:
    image: ollama/ollama
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - fintrac_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - fintrac_network
    depends_on:
      - prometheus

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - fintrac_network
    depends_on:
      - cadvisor
      - postgres_exporter

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - fintrac_network
    privileged: true
    environment:
      - DOCKER_HOST_IP=host.docker.internal

  # PostgreSQL Exporter
  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:140xxx-+@db_postgres:5432/myfintrackdb?sslmode=disable
    networks:
      - fintrac_network
    depends_on:
      - db_postgres

  # Node Exporter
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - fintrac_network

networks:
  fintrac_network:
    driver: bridge

volumes:
  postgres_data:
  pgbackrest_repo:
  ollama_data:
  grafana-storage:
  prometheus-storage:
  backup_logs: