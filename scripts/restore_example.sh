BACKUP_LABEL=${1:-latest}
CUSTOM_RESTORE_DIR=${2}
DEFAULT_RESTORE_DIR="/tmp/restore_$(date +%Y%m%d_%H%M%S)"
RESTORE_DIR=${CUSTOM_RESTORE_DIR:-$DEFAULT_RESTORE_DIR}

LOG_FILE="/var/log/pgbackrest/restore.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

echo "[$DATE] ==================== RESTORE OPERATION STARTED ====================" >> $LOG_FILE
echo "[$DATE] Backup label: $BACKUP_LABEL" >> $LOG_FILE
echo "[$DATE] Restore directory: $RESTORE_DIR" >> $LOG_FILE

# Fonksiyonlar
log_info() {
    echo "[$DATE] ‚ÑπÔ∏è  INFO: $1" >> $LOG_FILE
    echo "‚ÑπÔ∏è  INFO: $1"
}

log_success() {
    echo "[$DATE] ‚úÖ SUCCESS: $1" >> $LOG_FILE
    echo "‚úÖ SUCCESS: $1"
}

log_error() {
    echo "[$DATE] ‚ùå ERROR: $1" >> $LOG_FILE
    echo "‚ùå ERROR: $1"
}

log_warning() {
    echo "[$DATE] ‚ö†Ô∏è  WARNING: $1" >> $LOG_FILE
    echo "‚ö†Ô∏è  WARNING: $1"
}

log_info "Listing available backups..."
AVAILABLE_BACKUPS=$(pgbackrest --stanza=myfintrackstanza info --output=text)
echo "[$DATE] Available backups:" >> $LOG_FILE
echo "$AVAILABLE_BACKUPS" >> $LOG_FILE

log_info "Preparing restore directory: $RESTORE_DIR"

if [ -d "$RESTORE_DIR" ]; then
    log_warning "Restore directory already exists. Contents will be overwritten."
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Restore operation cancelled by user."
        exit 0
    fi

    rm -rf "$RESTORE_DIR"/*
    log_info "Existing content cleared."
fi

mkdir -p "$RESTORE_DIR"
if [ $? -eq 0 ]; then
    log_success "Restore directory created: $RESTORE_DIR"
else
    log_error "Failed to create restore directory: $RESTORE_DIR"
    exit 1
fi

log_info "Checking available disk space..."
AVAILABLE_SPACE=$(df "$RESTORE_DIR" | tail -1 | awk '{print $4}')
AVAILABLE_SPACE_GB=$((AVAILABLE_SPACE / 1024 / 1024))

if [ $AVAILABLE_SPACE_GB -lt 5 ]; then
    log_error "Insufficient disk space. Available: ${AVAILABLE_SPACE_GB}GB (Minimum required: 5GB)"
    exit 1
else
    log_success "Sufficient disk space available: ${AVAILABLE_SPACE_GB}GB"
fi

# 4. Backup'ƒ± restore et
log_info "Starting restore operation..."

if [ "$BACKUP_LABEL" = "latest" ]; then
    log_info "Restoring latest backup..."
    RESTORE_COMMAND="pgbackrest --stanza=myfintrackstanza --delta --type=immediate restore --pg1-path=$RESTORE_DIR"
else
    log_info "Restoring specific backup: $BACKUP_LABEL"
    RESTORE_COMMAND="pgbackrest --stanza=myfintrackstanza --delta --set=$BACKUP_LABEL restore --pg1-path=$RESTORE_DIR"
fi

echo "[$DATE] Executing: $RESTORE_COMMAND" >> $LOG_FILE

if eval $RESTORE_COMMAND; then
    log_success "Restore operation completed successfully!"

    log_info "Performing post-restore checks..."
    
    if [ -f "$RESTORE_DIR/postgresql.conf" ]; then
        log_success "postgresql.conf found"
    else
        log_warning "postgresql.conf not found"
    fi
    
    if [ -f "$RESTORE_DIR/pg_hba.conf" ]; then
        log_success "pg_hba.conf found"
    else
        log_warning "pg_hba.conf not found"
    fi

    RESTORE_SIZE=$(du -sh "$RESTORE_DIR" | cut -f1)
    log_info "Restored data size: $RESTORE_SIZE"
    
    if [ "$BACKUP_LABEL" != "latest" ]; then
        log_info "Creating recovery configuration..."
        cat > "$RESTORE_DIR/recovery.conf" << EOF
# Generated by restore script
restore_command = 'pgbackrest --stanza=myfintrackstanza archive-get %f "%p"'
recovery_target_action = 'promote'
EOF
        log_success "recovery.conf created for point-in-time recovery"
    fi
    
else
    log_error "Restore operation failed!"
    echo "[$DATE] Restore command output:" >> $LOG_FILE
    eval $RESTORE_COMMAND >> $LOG_FILE 2>&1
    exit 1
fi

log_info "Creating Docker run example..."

DOCKER_COMMAND="docker run -d --name fintrack_restored_db_$(date +%Y%m%d_%H%M%S) -p 5434:5432 -e POSTGRES_PASSWORD=140xxx-+ -v $RESTORE_DIR:/var/lib/postgresql/data postgres:15"

echo "[$DATE] To start PostgreSQL with restored data, run:" >> $LOG_FILE
echo "[$DATE] $DOCKER_COMMAND" >> $LOG_FILE

log_success "Restore completed successfully!"
echo ""
echo "üìã RESTORE SUMMARY:"
echo "   ‚Ä¢ Backup used: $BACKUP_LABEL"
echo "   ‚Ä¢ Restore location: $RESTORE_DIR"
echo "   ‚Ä¢ Data size: $(du -sh "$RESTORE_DIR" | cut -f1)"
echo ""
echo "üê≥ To start PostgreSQL with restored data:"
echo "   $DOCKER_COMMAND"
echo ""
echo "üîç To verify the restore:"
echo "   docker exec -it <container_name> psql -U postgres -d myfintrackdb -c '\\dt'"
echo ""
echo "üìù Logs: $LOG_FILE"

echo "[$DATE] ==================== RESTORE OPERATION COMPLETED ====================" >> $LOG_FILE

# Ba≈üarƒ± bildirimi (≈ûimdlik dursun)
# curl -X POST -H 'Content-type: application/json' \
#   --data '{"text":"‚úÖ FinTrack DB Restore Completed Successfully\nBackup: '${BACKUP_LABEL}'\nLocation: '${RESTORE_DIR}'"}' \
#   YOUR_SLACK_WEBHOOK_URL

exit 0