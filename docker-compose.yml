version: "3.8"

services:
  # ASP.NET Web API
  fintrackwebapi:
    build:
      context: ./FinTrackWebApi
      dockerfile: Dockerfile
    container_name: fintrack_api
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - PythonChatBotService__Url=http://finbot_api:8000/chat
      - ConnectionStrings__DefaultConnection=Host=db_postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__LogConnection=Host=postgres_db_logs;Port=5432;Database=myfintrack_logs;Username=postgres;Password=${LOG_DB_PASSWORD}
    depends_on:
      - finbotwebapi
      - db_postgres
      - postgres_db_logs
    networks:
      - fintrac_network

  # Ngrok
  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok_tunnel
    restart: unless-stopped
    ports:
      - "4040:4040"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command: ["http", "fintrack_api:80", "--log=stdout"]
    depends_on:
      - fintrackwebapi
    networks:
      - fintrac_network

  # FinBot API
  finbotwebapi:
    build:
      context: ./FinBotWebApi
      dockerfile: Dockerfile
    container_name: finbot_api
    ports:
      - "5001:8000"
    env_file:
      - ./FinBotWebApi/.env
    environment:
      - OLLAMA_API_URL=http://ollama:11434
    depends_on:
      - ollama
    networks:
      - fintrac_network

  # PostgreSQL
  db_postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres_db
    user: postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - pgbackrest_repo:/backup
      - ./pgbackrest/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf:ro
      - backup_logs:/var/log/pgbackrest
    networks:
      - fintrac_network
    restart: unless-stopped
    command: /scripts/entrypoint.sh

  postgres_db_logs:
    image: postgres:15
    container_name: postgres_db_logs
    restart: unless-stopped
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=myfintrack_logs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${LOG_DB_PASSWORD}
    volumes:
      - log_db_data:/var/lib/postgresql/data
    networks:
      - fintrac_network

  backup_monitor_simple:
    image: nginx:alpine
    container_name: backup_dashboard
    ports: ["8081:80"]
    volumes:
      - ./monitoring/html:/usr/share/nginx/html:ro
      - backup_logs:/var/log/pgbackrest:ro
    networks: ["fintrac_network"]
    restart: unless-stopped

  ollama:
    image: ollama/ollama
    container_name: ollama
    ports: ["11434:11434"]
    volumes: ["ollama_data:/root/.ollama"]
    networks: ["fintrac_network"]
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices: [{driver: nvidia, count: 1, capabilities: [gpu]}]

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports: ["3000:3000"]
    volumes: ["grafana-storage:/var/lib/grafana"]
    networks: ["fintrac_network"]
    depends_on: ["prometheus"]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports: ["9090:9090"]
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-storage:/prometheus
    command: ['--config.file=/etc/prometheus/prometheus.yml', '--storage.tsdb.path=/prometheus', '--web.enable-lifecycle']
    networks: ["fintrac_network"]
    depends_on: [cadvisor, postgres_exporter]
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports: ["8080:8080"]
    volumes: ["/:/rootfs:ro", "/var/run:/var/run:rw", "/sys:/sys:ro", "/var/lib/docker/:/var/lib/docker:ro"]
    privileged: true
    networks: ["fintrac_network"]
    restart: unless-stopped

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks: ["fintrac_network"]
    depends_on: ["db_postgres"]
    restart: unless-stopped

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports: ["9100:9100"]
    volumes: ["/proc:/host/proc:ro", "/sys:/host/sys:ro", "/:/rootfs:ro"]
    command: ['--path.procfs=/host/proc', '--path.sysfs=/host/sys', '--path.rootfs=/rootfs']
    networks: ["fintrac_network"]
    restart: unless-stopped

networks:
  fintrac_network:
    driver: bridge

volumes:
  postgres_data:
  pgbackrest_repo:
  ollama_data:
  grafana-storage:
  prometheus-storage:
  backup_logs:
  log_db_data: