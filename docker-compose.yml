version: "3.8"

services:
  # ASP.NET Web API
  fintrackwebapi:
    build:
      context: ./FinTrackWebApi
      dockerfile: Dockerfile
    container_name: fintrack_api
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - PythonChatBotService__Url=http://finbot_api:8000/chat
      - ConnectionStrings__DefaultConnection=Host=db_postgres;Port=5432;Database=myfintrackdb;Username=postgres;Password=140xxx-+
    depends_on:
      - finbotwebapi
      - db_postgres
      - ollama
    networks:
      - fintrac_network

  # Ngrok
  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok_tunnel
    restart: unless-stopped
    ports:
      - "4040:4040"
    environment:
        - NGROK_AUTHTOKEN=YOUR_KEY
    command:
      - "http"
      - "fintrack_api:8080"
      - "--log=stdout"
    depends_on:
      - fintrackwebapi
    networks:
      - fintrac_network

  # FinBot API
  finbotwebapi:
    build:
      context: ./FinBotWebApi
      dockerfile: Dockerfile
    container_name: finbot_api
    ports:
      - "5001:8000"
    env_file:
      - ./FinBotWebApi/.env
    environment:
      - OLLAMA_API_URL=http://ollama:11434
    depends_on:
      - ollama
    networks:
      - fintrac_network

  # PostgreSQL
  db_postgres:
    image: postgres:15
    container_name: postgres_db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=myfintrackdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=140xxx-+
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fintrac_network
    restart: unless-stopped
    command: >
      postgres
      -c archive_mode=on
      -c archive_command='test ! -f /backup/archive/%f && pgbackrest --stanza=myfintrackstanza archive-push %p'
      -c wal_level=replica
      -c max_wal_senders=3
      -c listen_addresses='*'
      -c log_statement=all
      -c log_directory=pg_log
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c logging_collector=on

  # pgBackRest
  pgbackrest_all_in_one:
    image: postgres:15
    container_name: pgbackrest_manager
    environment:
      - PGPASSWORD=140xxx-+
      - TZ=Europe/Istanbul
    volumes:
      - pgbackrest_repo:/backup
      - ./scripts:/scripts
      - backup_logs:/var/log/pgbackrest
    networks:
      - fintrac_network
    depends_on:
      - db_postgres
    restart: unless-stopped
    command: >
      bash -c "
        apt update && 
        apt install -y pgbackrest cron dos2unix curl &&
        
        # Script'leri düzelt
        dos2unix /scripts/*.sh &&
        chmod +x /scripts/*.sh &&
        
        # pgBackRest config oluştur
        mkdir -p /etc/pgbackrest &&
        cat > /etc/pgbackrest/pgbackrest.conf << 'EOF'
      [global]
      repo1-path=/backup
      repo1-retention-full=7
      repo1-retention-diff=4
      repo1-retention-archive=7
      compress-type=lz4
      compress-level=3
      log-level-console=info
      log-level-file=detail
      log-path=/var/log/pgbackrest
      process-max=2
      start-fast=y
      archive-async=y
      backup-standby=n
      delta=y
      buffer-size=16MiB
      
      [myfintrackstanza]
      pg1-path=/var/lib/postgresql/data
      pg1-host=db_postgres
      pg1-port=5432
      pg1-user=postgres
      EOF
        
        # Log dizinini oluştur
        mkdir -p /var/log/pgbackrest &&
        
        # Stanza oluştur (hata göz ardı et)
        pgbackrest --stanza=myfintrackstanza stanza-create || true &&
        
        # İlk backup (hata göz ardı et)
        pgbackrest --stanza=myfintrackstanza --type=full backup || true &&
        
        # Cron job'ları ayarla
        echo '0 2 * * * root /scripts/backup_incremental.sh' > /etc/cron.d/pgbackrest &&
        echo '0 3 * * 0 root /scripts/backup_full.sh' >> /etc/cron.d/pgbackrest &&
        echo '0 */6 * * * root /scripts/health_check.sh' >> /etc/cron.d/pgbackrest &&
        chmod 0644 /etc/cron.d/pgbackrest &&
        crontab /etc/cron.d/pgbackrest &&
        
        # Cron'u başlat ve bekle
        cron &&
        tail -f /dev/null
      "

  # BASİT Backup Monitor
  backup_monitor_simple:
    image: nginx:alpine
    container_name: backup_dashboard
    ports:
      - "8081:80"
    volumes:
      - ./monitoring/html:/usr/share/nginx/html:ro
      - backup_logs:/var/log/pgbackrest:ro
    networks:
      - fintrac_network
    restart: unless-stopped

  # Ollama
  ollama:
    image: ollama/ollama
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - fintrac_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - fintrac_network
    depends_on:
      - prometheus

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - fintrac_network
    depends_on:
      - cadvisor
      - postgres_exporter

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - fintrac_network
    privileged: true
    environment:
      - DOCKER_HOST_IP=host.docker.internal

  # PostgreSQL Exporter
  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:140xxx-+@db_postgres:5432/myfintrackdb?sslmode=disable
    networks:
      - fintrac_network
    depends_on:
      - db_postgres

  # Node Exporter
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - fintrac_network

networks:
  fintrac_network:
    driver: bridge

volumes:
  postgres_data:
  pgbackrest_repo:
  ollama_data:
  grafana-storage:
  prometheus-storage:
  backup_logs: